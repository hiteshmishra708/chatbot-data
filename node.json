[
    {
        "question": "What are the major benefits of Node.js?",
        "answer": "Some major benefits of Node.js are:\neasy to learn and huge community support.\neasy scalability and high performance.\nhighly extensible with extended support.\nFull-stack JavaScript.\nCaching mechanism allows web pages to load faster.\nNon-blocking I/O systems."
    },
    {
        "question": "Explain the difference between Asynchronous and Non-blocking?",
        "answer": "Asynchronous or non-synchronous means that for a message sent, we will not receive a response immediately; thus, there is no dependency or order of execution. The server stores information and an acknowledgement is received when the action is performed. This improves performance and efficiency.\nNon-blocking operation, as the name suggests, does not stop or block any operations. The difference is that non-blocking operation receives a response immediately with whatever data is available. If data is not available, it returns an error. It is mostly used with I/O."
    },
    {
        "question": "Explain package.json?",
        "answer": "The npm packages contain a file package.json in the project root folder, which contains the metadata relevant to the project. It gives information to the npm through which npm identifies a project and its dependencies. Apart from this, it contains other metadata like project description, version, license information and configuration data. "
    },
    {
        "question": "Describe error-first callback in Node.js?",
        "answer": "The error-first callback, also called as errorback gives the error and data. It takes a few arguments, the first one being the error object and others being the data. The error-first callback pattern has many advantages: since it is consistent, leads to more adoption, if there is no reference to the data, there is no need to process it. If there is no error, the callback is called with null as the first argument. "
    },
    {
        "question": "Explain the purpose of module.exports.",
        "answer": "The purpose is to give instructions to tell Node.js about which part of the code like objects, functions, strings etc. should be exported from a given file so that other files can access it. Suppose we have a module that looks like:\n{\n    id: '.',\n    exports: {},\n    parent: null,\n    filename: '/modtest.js',\n    loaded: false,\n    children: [],\n    paths:\n    [\n        '/node_modules',\n        '/Users/node_modules',\n        '/Users/mycomp/projects/node_modules',\n        '/node_modules'\n    ]\n}\nNote that the exports property is empty, now if we apply code to this property, that will become the export of the module. If we require the module in another file, that will be the export property value:\nmodule.exports.stringProperty = \"Hello, welcome\";\nconsole.log(module);\n{\n    id: '.',\n    exports: { stringProperty: 'Hello, welcome' }\n    ...\n}"
    },
    {
        "question": "What is the Reactor Pattern in Node.js?",
        "answer": "It is a concept of non-blocking I/O operations in Node.js. Through this pattern, we get the handler (or callback function) for each I/O operation. Each I/O request is submitted to a demultiplexer, that handles concurrency and queues the requests/events. Reactor pattern consists of resources, event notifier/demultiplexer, event loop, event queue, request handler."
    },
    {
        "question": "Explain LTS releases of Node.js",
        "answer": "LTS or Long-Term Support is applied to release lines that are supported and maintained by Node.js project for an extended period. There are two types of LTS: \n\nActive, which is actively maintained and upgraded, and \nmaintenance line that is nearing its end of the line and is maintained for a short window of time."
    },
    {
        "question": "What is a URL module?",
        "answer": "The URL module provides APIs to work with URLs:\na legacy API which is specific to Node.js.\nnewer API that implements WHATWG URL Standard used by web browsers.\nSome example methods are URL.port, URL.password, URL.host, url.toString() under the URL class. For the full documentation, check the official URL module page."
    },
    {
        "question": "Explain the working mechanism of control flow function?",
        "answer": "Control flow function is the sequence in which statements or functions are executed. Since I/O operations are non-blocking in Node.js, control flow cannot be linear. Therefore, it registers a callback to the event loop and passes the control back to the node, so that the next lines of code can run without interruption. For example:\n[code language=\"javascript\"]\nfs.readFile('/root/text.txt', func(err, data){\n  console.log(data);\n});\nconsole.log(\"This is displayed first\");\n[/code]\nIn this, the readFile operation will take some time; however, the next console.log is not blocked. Once the operation completes, data will be displayed."
    },
    {
        "question": "What are the main differences between spawn() and fork() methods in Node.js?",
        "answer": "Answer: \nSpawn\tFork\nDesigned to run system commands.\tA special instance of spawn() that runs a new instance of V8.\nDoes not execute any other code within the node process. \tCan create multiple workers that run on the same Node codebase.\nchild_process.spawn(command[, args][, options]) creates a new process with the given command. \tSpecial case of spawn() to create child processes using. child_process.fork(modulePath[, args][, options])\nCreates a streaming interface (data buffering in binary format) between parent and child process.\tCreates a communication (messaging) channel between parent and child process.\nMore useful for continuous operations like data streaming (read/write), example, streaming images/files from the spawn process to the parent process.\tMore useful for messaging, example, JSON or XML data messaging."
    },
    {
        "question": "What is the purpose of ExpressJS package in Node.js?",
        "answer": "ExpressJS package or framework is built on top of Node.js to fast-track the development of single-page, multi-page and hybrid server-based applications. Express is said to be the backend part of the MEAN stack.\nQuestion: Highlight the differences between process.nextTick() and setImmediate().\nAnswer: \nlet execseq = function() {  \n setImmediate(() => console.log(\"immediate\"));  \n process.nextTick(() => console.log(\"nextTick\"));  \n console.log(\"event loop\");\n}\nThis will execute the \"event loop\", then \"nextTick\" and then \"immediate\"."
    },
    {
        "question": "Explain the difference between Node.js vs Ajax?",
        "answer": "Ajax is a client-side technology and is used for updating page content without refreshing the same. Node.js is a server-side JavaScript that is used to develop server software. Further, Node.js is a full-fledged development environment, whereas Ajax is used just to obtain data or run scripts."
    },
    {
        "question": "Give the reason why Express' app' and 'server' must be kept separate.",
        "answer": "If we keep the app and server functionalities separate, the code can be divided into multiple modules, thereby reducing the dependency between modules. Each module will perform a single task. Also, due to the separation of logic, we can avoid duplicate code.\n"
    },
    {
        "question": "Explain the Difference between setImmediate() vs setTimeout().",
        "answer": "While the word immediate is slightly misleading, the callback happens only after the I/O events callbacks, when we call setImmediate(). setTimeout() is used to set a delay (in milliseconds) for execution of a one-time callback. If we execute, \nsetImmediate(function() {\n  console.log('setImmediate')\n})\nsetTimeout(function() {\n  console.log('setTimeout')\n}, 0)\nWe will get the output as 'setTimeOut' and then 'setImmediate'."
    },
    {
        "question": "List Out and explain the popular modules of Node.js?",
        "answer": "The core modules of Node.js are:\nhttp\tincludes classes, methods and events for creating Node.js http server.\nURL\tcontains methods for URL resolution and parsing.\nquerystring\tdeals with query string.\npath\tcontains methods for working with file paths.\nfs\tconsists of classes, methods, and events for handling file I/O.\nutil\tutil module includes utility functions useful for developers.\n "
    },
    {
        "question": "Add an example of Streams in Node.js?",
        "answer": "Example of reading from stream:\nvar readStream = fs.createReadStream('data.txt');\nreadStream.on('data', function(chunk) {\n   data += chunk;\n});\nExample of writing into stream:\nvar writeStream = fs.createWriteStream('dataout.txt');\nwriteStream.write(data,'UTF8');\nwriteStream.end();"
    },
    {
        "question": "What is crypto in Node.js? How is it used?",
        "answer": "The crypto module in Node.js is used for cryptography, i.e. includes a set of wrappers for open SSL's hash, HMAC, sign, decipher, cipher and verify functions.\nHere is an example of using cipher for encryption:\nconst crypto = require('crypto');  \nconst cipher = crypto.createCipher('usrnm', 'pwdd');  \nvar encryptd = cipher.update('Welcome to hackr', 'utf8', 'hex');  \nencryptd += cipher.final('hex');  \nconsole.log(encryptd);   \nLet’s use decipher to decrypt the above to see if we get the same text back:\nconst crypto = require('crypto');  \nconst decipher = crypto.createDecipher('usrnm', 'pwdd');  \nvar encryptd = '<enter the previous output-encrypted code here>';  \nvar decryptd = decipher.update(encryptd, 'hex', 'utf8');  \ndecryptd += decipher.final('utf8');  \nconsole.log(decryptd);  "
    },
    {
        "question": "Explain the use of the DNS module in Node.js?",
        "answer": "The DNS module is used for resolving a name. It is provided by the operating system and is used for the actual DNS lookup too. With this module, it is not required to memorize the IP addresses as the DNS servers convert domain/subdomain into IP addresses."
    },
    {
        "question": "Explain the security mechanism of Node.js?",
        "answer": "Some mechanisms are:\n\nAuthorization codes: We can use authorization codes to secure Node.js. That way, any third party that wants to access Node.js goes through the GET request of the resource provider's network. \nCertified Modules: Certification modules are like filters that scan the libraries of Node.js to identify if any third-party code is present or not. Any hacking can be detected using certifications. \nCurated Screening register: This is a quality control system where all the packages (code and software) are checked to ensure their safety. This scan helps to eliminate unverified or unreliable libraries getting into your application.\nRegular updates: Downloading the newest version of Node.js will prevent potential hackers and attacks. "
    },
    {
        "question": "Explain various types of API functions in Node.js.",
        "answer": "The two types of API functions in Node.js are:\nAsynchronous/Non-blocking: These requests do not wait for the server to respond. They continue to process the next request, and once the response is received, they receive the same.\nSynchronous/Blocking: These are requests that block any other requests. Once the request is completed, only then the next one is taken up.\nQuestion: What are LTS versions of Node.js?\nAnswer: Long Term Support or LTS version/releases of Node.js are the releases which receive all the critical fixes, performance step ups and security updates. These versions receive support for at least 1.5 years and have a focus on security and stability of the application.\nQuestion: Explain the working of assert in Node.js\nAnswer: Assert is used to write tests in Node.js. The feedback is provided only if any of the test cases that are running fails. To test invariants, the module gives you a set of assertion tests. It is used internally by Node.js, but if you use require (‘assert’) code, you will be able to use it in other applications as well.\nQuestion: What is callback hell?\nAnswer: In Node.js, callback hell is also known as the Pyramid of Doom. Caused by intensively nested, unreadable and unmanageable callbacks, making the code harder to read and debug. It is caused due to improper execution of the asynchronous logic.\nQuestion: What is stub in Node.js?\nAnswer: Stubs are programs or functions used to stimulate component behavior. Stubs provide the answers to the functions during test cases.\nQuestion: What is Event Loop?\nAnswer: All the asynchronous callbacks are handled by an event loop in Node.js. It is the foundation of the non-blocking input/output in Node.js, making it one of the most vital features of the environment. Due to the nature of Node.js being event-driven, a listener can be attached to an event for the callback to be executed by the former when the event occurs. Node.js executes the event loop and then moves on to the rest of the code, without having to wait for the output. Once the whole operation culminates, it receives the output and the callback function is executed. Once it receives the response, the functions are executed one by one.\nQuestion: What is stream in Node.js? What are its types?\nAnswer: In Node.js, streams are the collection of data similar to strings and arrays. Moreover, streams are objects through which you can read source data or write destination data continuously. These streams are particularly helpful for reading and processing large amounts of information. There are four types of streams in Node.js, which are:\nReadable: Used to read large amount of data from source\nWriteable: Used to write data to destination\nDuplex: Used for both read and write\nTransform: A duplex stream used for data modification\nQuestion: List and explain the timing features of Node.js.\nAnswer: A timer module containing multiple functions for the execution of the code after a specific time period is provided by Node.js. Some of the functions provided in this module are:\nprocess.nextTick: This function schedules a callback function which is required to be invoked in the next iteration of the event loop\nsetTimeout/clearTimeout: This function schedules code execution after the assigned amount of time (in milliseconds)\nsetImmediate/clearImmediate: This functions executes code at the conclusion of the existing event loop cycle\nsetInterval/clearInterval: This function is used to execute a block of code a number of times\nQuestion: Highlight the differences between process.nextTick() and setImmediate().\nAnswer: Both process.nextTick() and setImmediate() are functions of the Timers module, but the difference lies in their execution.\nThe process.nextTick() function waits for the execution of action till the next pass around in the event loop or when the event loop culminates, then only the callback function is invoked.\nThe setImmediate() function is used for callback method execution on the next cycle of the event loop, which returns it to the event loop for the execution of the input/output operations.\nQuestion: Explain readFile and createReadStream in Node.js.\nAnswer: Both readFile and createReadStream are ways to read and execute files provided by the Node.js.\nThe readFile process is fully buffered which returns response(s) only if the complete file is entered into the buffer and can be read. This process is highly memory intensive and can become slow in case the file size is large.\n\nThe createReadStream process is partially buffered, treating the entire process as a series of events. In this process, the whole files are split into chunks that are processed and then sent as a response individually in succession. Unlike readFile, createReadStream is effective when it comes to reading and processing large files.\nQuestion: Does Node.js provide a Debugger?\nAnswer: A built-in TCP protocol and the debugging client is provided by Node.js. If you wish to debug your file, you can use the following argument before the name of your JS file which you wish to debug.\nnode debug [script.js | -e “script” | :]\n\nQuestion: Describe the exit codes in Node.js.\nAnswer: Exit codes in Node.js are a specific group of codes that finish off processes, which can include global objects as well. Some of the exit codes in Node.js are:\nInternal JavaScript Evaluation Failure\nFatal Error\nInternal Exception handler Run-time failure\nUnused\nUncaught fatal exception\nQuestion: Why is NODE_ENV used?\nAnswer: When any Node.js project is in the stage of production, Node.js promotes the principle to use NODE_ENV variable to flag it. When the NODE-ENV is set to production, your application will perform at a speed 2 to 3 times faster than usual. The variable also improves judgment during the development phase of projects.\nQuestion: What is Event Emitter in Node.js?\nAnswer: Node.js has an EventEmitter class which holds all the objects which can emit events. These objects hold a function called eventEmitter.on() using which multiple functions can be attached to the event emitted by the object. Whenever an object from the EventEmitter class throws an event, all the attached functions to the vent are called upon synchronously.\nQuestion: What is Punycode?\nAnswer: Punycode can be defined as an encoding syntax in Node.js which is helpful for converting the Unicode string of characters into ASCII. This is done as the hostnames can only comprehend ASCII codes and not Unicode. While it was bundled up within the default package in recent versions, you can use it in the previous version using the following code:\npunycode = require(‘punycode’);\n\nQuestion: Explain the concept of JIT and highlight its relation with Node.js.\nAnswer: A JIT or Just-in-time compiler sends bytecode (consisting of interpretable instructions) to the processor by converting it into instruction. Once you are finished with the writing part of a program, the source language statements are compiled into bytecode by the compiler, rather than the code that carries the data which is similar to the destination hardware platform processor.\nNode.js employs JIT compilation which improves the speed of code execution to a great extent. It takes the source code and converts it into machine code in runtime. Through this, functions that are called regularly are compiled to machine code, increasing the overall speed of code execution.\nQuestion: Why is the buffer class used in Node.js?\nAnswer: In Node.js, the buffer class stores the raw data, in a manner similar to that of an array of integers. However, it communicates to a raw memory dump, allocated outside the V8 heap. The Buffer class is a global class and can be accessed in an application without having to import the buffer module. It is majorly used as pure JavaScript code is not attuned with binary data.\nQuestion: What is the difference between fork () and spawn () methods in Node.js?\nAnswer: In Node.js, spawn () launches a new process with the available set of commands. This doesn’t generate a new V8 instance only a single copy of the node module is active on the processor. This method can be used when your child process returns a large amount of data to the node.\nOn the other hand, fork () is a particular case of spawn () which generates a new V8 engines instance. Through this method, multiple workers run on a single node code base for multiple tasks.\nQuestion: State the steps to write an Express JS application.\nAnswer: To set up an ExpressJs application, you need to follow the following steps:\nCreate a folder with the project name\nCreate a file named package.json inside the folder\nRun the ‘npm install’ command on the command prompt to install the libraries present in the package file\\\nCreate a file named server.js\nCreate the ‘router’ file inside the package consisting of a folder named as index.js\nThe application is created inside the package containing the index.html file\nWith this, we come to an end of the top Node.js interview questions. Do you think we missed an important question or have any doubts that need to be cleared? Let us know in the comments below. You can also check our best Node.js tutorials, curated by community members.\nFollow this udemy course and start brushing up your node.js skills: The Complete Node.js Developer Course (3rd Edition).\nFollow this top-notch programming book to crack any programming interview: Cracking the Coding Interview: 189 Programming Questions and Solution.\nPeople are also reading:\nDifference between NodeJS vs AngularJS\nPHP vs NodeJS: Differences you need to know\nHow to Make a Chrome Extension\nMost Frequently Asked Docker Interview Questions\n\nMost Frequently Asked DevOps Interview Questions\nTop Bootstrap Interview Questions and Answers\nTop Android Interview Questions and Answers\nTop Java Interview Questions and Answers\nJquery Interview Questions\nTop Data Structure Interview Questions\n"
    }
]